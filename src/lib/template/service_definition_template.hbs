/**
 *       ***************************************
 *          AUTOGENERATED FILE - DO NOT EDIT
 *       ***************************************
 *
 * This file was generated by grpc-tools-node-protoc-promise-ts
 * https://github.com/rhinodavid/grpc-tools-node-protoc-promise-ts
 *
 * package: {{{packageName}}}
 * file: {{{fileName}}}
 * generated at: {{{dateString}}}
 */

/* tslint:disable */
/* eslint-disable */

{{#each imports}}
    {{{this}}}
{{/each}}
{{#if generatePromiseClients}}
    import { TUnaryRpc } from "grpc-promise-ts";
{{/if}}

{{#each services}}
    interface I{{{serviceName}}}Service extends grpc.ServiceDefinition<grpc.UntypedServiceImplementation> {
        {{#each methods}}
        {{lcFirst methodName}}: I{{{serviceName}}}Service_I{{{methodName}}};
        {{/each}}
    }

    {{#each methods}}
        interface I{{{serviceName}}}Service_I{{{methodName}}} extends grpc.MethodDefinition<{{{requestTypeName}}}, {{{responseTypeName}}}> {
            path: string; // "/{{{packageName}}}.{{{serviceName}}}/{{{methodName}}}"
            requestStream: boolean; // {{{requestStream}}}
            responseStream: boolean; // {{{responseStream}}}
            requestSerialize: grpc.serialize<{{{requestTypeName}}}>;
            requestDeserialize: grpc.deserialize<{{{requestTypeName}}}>;
            responseSerialize: grpc.serialize<{{{responseTypeName}}}>;
            responseDeserialize: grpc.deserialize<{{{responseTypeName}}}>;
        }
    {{/each}}

    export const {{{serviceName}}}Service: I{{{serviceName}}}Service;

    export interface I{{{serviceName}}}Server {
        {{#each methods}}
            {{#eq type "ClientUnaryCall"}}
        {{lcFirst methodName}}: grpc.handleUnaryCall<{{{requestTypeName}}}, {{{responseTypeName}}}>;
            {{/eq}}
            {{#eq type "ClientWritableStream"}}
        {{lcFirst methodName}}: grpc.handleClientStreamingCall<{{{requestTypeName}}}, {{{responseTypeName}}}>;
            {{/eq}}
            {{#eq type "ClientReadableStream"}}
        {{lcFirst methodName}}: grpc.handleServerStreamingCall<{{{requestTypeName}}}, {{{responseTypeName}}}>;
            {{/eq}}
            {{#eq type "ClientDuplexStream"}}
        {{lcFirst methodName}}: grpc.handleBidiStreamingCall<{{{requestTypeName}}}, {{{responseTypeName}}}>;
            {{/eq}}
        {{/each}}
    }

    export interface I{{{serviceName}}}Client {
        {{#each methods}}
            {{#eq type "ClientUnaryCall"}}
        {{lcFirst methodName}}(request: {{{requestTypeName}}}, callback: (error: grpc.ServiceError | null, response: {{{responseTypeName}}}) => void): grpc.ClientUnaryCall;
        {{lcFirst methodName}}(request: {{{requestTypeName}}}, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: {{{responseTypeName}}}) => void): grpc.ClientUnaryCall;
        {{lcFirst methodName}}(request: {{{requestTypeName}}}, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: {{{responseTypeName}}}) => void): grpc.ClientUnaryCall;
            {{/eq}}
            {{#eq type "ClientWritableStream"}}
        {{lcFirst methodName}}(callback: (error: grpc.ServiceError | null, response: {{{responseTypeName}}}) => void): grpc.ClientWritableStream<{{{requestTypeName}}}>;
        {{lcFirst methodName}}(metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: {{{responseTypeName}}}) => void): grpc.ClientWritableStream<{{{requestTypeName}}}>;
        {{lcFirst methodName}}(options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: {{{responseTypeName}}}) => void): grpc.ClientWritableStream<{{{requestTypeName}}}>;
        {{lcFirst methodName}}(metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: {{{responseTypeName}}}) => void): grpc.ClientWritableStream<{{{requestTypeName}}}>;
            {{/eq}}
            {{#eq type "ClientReadableStream"}}
        {{lcFirst methodName}}(request: {{{requestTypeName}}}, options?: Partial<grpc.CallOptions>): grpc.ClientReadableStream<{{{responseTypeName}}}>;
        {{lcFirst methodName}}(request: {{{requestTypeName}}}, metadata?: grpc.Metadata, options?: Partial<grpc.CallOptions>): grpc.ClientReadableStream<{{{responseTypeName}}}>;
            {{/eq}}
            {{#eq type "ClientDuplexStream"}}
        {{lcFirst methodName}}(): grpc.ClientDuplexStream<{{{requestTypeName}}}, {{{responseTypeName}}}>;
        {{lcFirst methodName}}(options: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<{{{requestTypeName}}}, {{{responseTypeName}}}>;
        {{lcFirst methodName}}(metadata: grpc.Metadata, options?: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<{{{requestTypeName}}}, {{{responseTypeName}}}>;
            {{/eq}}
        {{/each}}
    }

    export class {{{serviceName}}}Client extends grpc.Client implements I{{{serviceName}}}Client {
        constructor(address: string, credentials: grpc.ChannelCredentials, options?: object);
        {{#each methods}}
            {{#eq type "ClientUnaryCall"}}
                public {{lcFirst methodName}}(request: {{{requestTypeName}}}, callback: (error: grpc.ServiceError | null, response: {{{responseTypeName}}}) => void): grpc.ClientUnaryCall;
                public {{lcFirst methodName}}(request: {{{requestTypeName}}}, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: {{{responseTypeName}}}) => void): grpc.ClientUnaryCall;
                public {{lcFirst methodName}}(request: {{{requestTypeName}}}, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: {{{responseTypeName}}}) => void): grpc.ClientUnaryCall;
            {{/eq}}
            {{#eq type "ClientWritableStream"}}
                public {{lcFirst methodName}}(callback: (error: grpc.ServiceError | null, response: {{{responseTypeName}}}) => void): grpc.ClientWritableStream<{{{requestTypeName}}}>;
                public {{lcFirst methodName}}(metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: {{{responseTypeName}}}) => void): grpc.ClientWritableStream<{{{requestTypeName}}}>;
                public {{lcFirst methodName}}(options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: {{{responseTypeName}}}) => void): grpc.ClientWritableStream<{{{requestTypeName}}}>;
                public {{lcFirst methodName}}(metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: {{{responseTypeName}}}) => void): grpc.ClientWritableStream<{{{requestTypeName}}}>;
            {{/eq}}
            {{#eq type "ClientReadableStream"}}
                public {{lcFirst methodName}}(request: {{{requestTypeName}}}, options?: Partial<grpc.CallOptions>): grpc.ClientReadableStream<{{{responseTypeName}}}>;
                public {{lcFirst methodName}}(request: {{{requestTypeName}}}, metadata?: grpc.Metadata, options?: Partial<grpc.CallOptions>): grpc.ClientReadableStream<{{{responseTypeName}}}>;
            {{/eq}}
            {{#eq type "ClientDuplexStream"}}
                public {{lcFirst methodName}}(options?: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<{{{requestTypeName}}}, {{{responseTypeName}}}>;
                public {{lcFirst methodName}}(metadata?: grpc.Metadata, options?: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<{{{requestTypeName}}}, {{{responseTypeName}}}>;
            {{/eq}}
        {{/each}}
    }

    {{#if ../generatePromiseClients}}
        /**
        * Interface and class to declare a {{{serviceName}}} client that has been promisifyed with the
        * `grpc-promise-ts` (https://github.com/rhinodavid/grpc-promise-ts) package
        */
        export interface I{{{serviceName}}}PromiseClient {
            {{#each methods}}
                {{#eq type "ClientUnaryCall"}}
                    {{lcFirst methodName}}:TUnaryRpc<{{{requestTypeName}}}, {{{responseTypeName}}}>;
                {{/eq}}
                {{#eq type "ClientWritableStream"}}
                    {{lcFirst methodName}}:TClientStreamingRpc<{{{requestTypeName}}}, {{{responseTypeName}}}>;
                {{/eq}}
                {{#eq type "ClientReadableStream"}}
                    {{lcFirst methodName}}(request: {{{requestTypeName}}}, metadata?: grpc.Metadata, options?: Partial<grpc.CallOptions>): grpc.ClientReadableStream<{{{responseTypeName}}}>;
                {{/eq}}
                {{#eq type "ClientDuplexStream"}}
                    {{lcFirst methodName}}(metadata?: grpc.Metadata, options?: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<{{{requestTypeName}}}, {{{responseTypeName}}}>;
                {{/eq}}
            {{/each}}
    }
        export class {{{serviceName}}}PromiseClient extends grpc.Client implements I{{{serviceName}}}PromiseClient {
            // This class cannot be directly instantiated.
            // To get an instance of {{{serviceName}}}PromiseClient, first create
            // a {{{serviceName}}}Client and then pass it to the `convertToPromiseClient`
            // function in the `gprc-promise-ts` package
            {{#each methods}}
                {{#eq type "ClientUnaryCall"}}
                    public {{lcFirst methodName}}:TUnaryRpc<{{{requestTypeName}}}, {{{responseTypeName}}}>;
                {{/eq}}
                {{#eq type "ClientWritableStream"}}
                    public {{lcFirst methodName}}:TClientStreamingRpc<{{{requestTypeName}}}, {{{responseTypeName}}}>;
                {{/eq}}
                {{#eq type "ClientReadableStream"}}
                    public {{lcFirst methodName}}(request: {{{requestTypeName}}}, metadata?: grpc.Metadata, options?: Partial<grpc.CallOptions>): grpc.ClientReadableStream<{{{responseTypeName}}}>;
                {{/eq}}
                {{#eq type "ClientDuplexStream"}}
                    public {{lcFirst methodName}}(metadata?: grpc.Metadata, options?: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<{{{requestTypeName}}}, {{{responseTypeName}}}>;
                {{/eq}}
            {{/each}}
        }
    {{/if}}
{{/each}}
