// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gRCP service definitions generate grpc service definition without promise clients 1`] = `
"/**
 *       ***************************************
 *          AUTOGENERATED FILE - DO NOT EDIT
 *       ***************************************
 *
 * This file was generated by grpc-tools-node-protoc-promise-ts
 * https://github.com/rhinodavid/grpc-tools-node-protoc-promise-ts
 *
 * package: test
 * file: test.proto
 * generated at: Mon Sep 21 2020 03:15:20 GMT-0600 (Mountain Daylight Time)
 */

/* tslint:disable */
/* eslint-disable */

import * as jspb from \\"google-protobuf\\";
export class MessageA extends jspb.Message {
  getInt(): number;
  setInt(value: number): MessageA;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MessageA.AsObject;
  static toObject(includeInstance: boolean, msg: MessageA): MessageA.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: MessageA,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): MessageA;
  static deserializeBinaryFromReader(
    message: MessageA,
    reader: jspb.BinaryReader
  ): MessageA;
}

export namespace MessageA {
  export type AsObject = {
    pb_int: number;
  };
}

export class MessageB extends jspb.Message {
  getInt(): number;
  setInt(value: number): MessageB;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MessageB.AsObject;
  static toObject(includeInstance: boolean, msg: MessageB): MessageB.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: MessageB,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): MessageB;
  static deserializeBinaryFromReader(
    message: MessageB,
    reader: jspb.BinaryReader
  ): MessageB;
}

export namespace MessageB {
  export type AsObject = {
    pb_int: number;
  };
}
"
`;

exports[`gRCP service definitions generate grpc service definition without promise clients 2`] = `
"/**
 *       ***************************************
 *          AUTOGENERATED FILE - DO NOT EDIT
 *       ***************************************
 *
 * This file was generated by grpc-tools-node-protoc-promise-ts
 * https://github.com/rhinodavid/grpc-tools-node-protoc-promise-ts
 *
 * package: test
 * file: test.proto
 * generated at: Mon Sep 21 2020 03:15:20 GMT-0600 (Mountain Daylight Time)
 */

/* tslint:disable */
/* eslint-disable */

import * as grpc from \\"grpc\\";
import * as test_pb from \\"./test_pb\\";

interface ITestService
  extends grpc.ServiceDefinition<grpc.UntypedServiceImplementation> {
  unary: ITestService_Iunary;
}

interface ITestService_Iunary
  extends grpc.MethodDefinition<test_pb.MessageA, test_pb.MessageB> {
  path: string; // \\"/test.Test/unary\\"
  requestStream: boolean; // false
  responseStream: boolean; // false
  requestSerialize: grpc.serialize<test_pb.MessageA>;
  requestDeserialize: grpc.deserialize<test_pb.MessageA>;
  responseSerialize: grpc.serialize<test_pb.MessageB>;
  responseDeserialize: grpc.deserialize<test_pb.MessageB>;
}

export const TestService: ITestService;

export interface ITestServer {
  unary: grpc.handleUnaryCall<test_pb.MessageA, test_pb.MessageB>;
}

export interface ITestClient {
  unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
}

export class TestClient extends grpc.Client implements ITestClient {
  constructor(
    address: string,
    credentials: grpc.ChannelCredentials,
    options?: object
  );
  public unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
}
"
`;

exports[`gRCP service definitions generate grpc service definition without promise clients 3`] = `
"/**
 *       ***************************************
 *          AUTOGENERATED FILE - DO NOT EDIT
 *       ***************************************
 *
 * This file was generated by grpc-tools-node-protoc-promise-ts
 * https://github.com/rhinodavid/grpc-tools-node-protoc-promise-ts
 *
 * package: test
 * file: test.proto
 * generated at: Mon Sep 21 2020 03:15:20 GMT-0600 (Mountain Daylight Time)
 */

/* tslint:disable */
/* eslint-disable */

import * as grpc from \\"grpc\\";
import * as test_pb from \\"./test_pb\\";
import { TUnaryRpc } from \\"grpc-promise-ts\\";

interface ITestService
  extends grpc.ServiceDefinition<grpc.UntypedServiceImplementation> {
  unary: ITestService_Iunary;
  unary: ITestService_Iunary;
}

interface ITestService_Iunary
  extends grpc.MethodDefinition<test_pb.MessageA, test_pb.MessageB> {
  path: string; // \\"/test.Test/unary\\"
  requestStream: boolean; // false
  responseStream: boolean; // false
  requestSerialize: grpc.serialize<test_pb.MessageA>;
  requestDeserialize: grpc.deserialize<test_pb.MessageA>;
  responseSerialize: grpc.serialize<test_pb.MessageB>;
  responseDeserialize: grpc.deserialize<test_pb.MessageB>;
}
interface ITestService_Iunary
  extends grpc.MethodDefinition<test_pb.MessageA, test_pb.MessageB> {
  path: string; // \\"/test.Test/unary\\"
  requestStream: boolean; // false
  responseStream: boolean; // false
  requestSerialize: grpc.serialize<test_pb.MessageA>;
  requestDeserialize: grpc.deserialize<test_pb.MessageA>;
  responseSerialize: grpc.serialize<test_pb.MessageB>;
  responseDeserialize: grpc.deserialize<test_pb.MessageB>;
}

export const TestService: ITestService;

export interface ITestServer {
  unary: grpc.handleUnaryCall<test_pb.MessageA, test_pb.MessageB>;
  unary: grpc.handleUnaryCall<test_pb.MessageA, test_pb.MessageB>;
}

export interface ITestClient {
  unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
}

export class TestClient extends grpc.Client implements ITestClient {
  constructor(
    address: string,
    credentials: grpc.ChannelCredentials,
    options?: object
  );
  public unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
}

/**
 * Interface and class to declare a Test client that has been promisifyed with the
 * \`grpc-promise-ts\` (https://github.com/rhinodavid/grpc-promise-ts) package
 */
export interface ITestPromiseClient {
  unary: TUnaryRpc<test_pb.MessageA, test_pb.MessageB>;
  unary: TUnaryRpc<test_pb.MessageA, test_pb.MessageB>;
}

export class TestPromiseClient extends grpc.Client
  implements ITestPromiseClient {
  // This class cannot be directly instantiated.
  // To get an instance of TestPromiseClient, first create
  // a TestClient and then pass it to the \`convertToPromiseClient\`
  // function in the \`gprc-promise-ts\` package
  public unary: TUnaryRpc<test_pb.MessageA, test_pb.MessageB>;
  public unary: TUnaryRpc<test_pb.MessageA, test_pb.MessageB>;

  // TODO: add other types of RPCs
}
"
`;

exports[`gRCP service definitions generate grpc service definition without promise clients 4`] = `
"/**
 *       ***************************************
 *          AUTOGENERATED FILE - DO NOT EDIT
 *       ***************************************
 *
 * This file was generated by grpc-tools-node-protoc-promise-ts
 * https://github.com/rhinodavid/grpc-tools-node-protoc-promise-ts
 *
 * package: test
 * file: test.proto
 * generated at: Mon Sep 21 2020 03:15:20 GMT-0600 (Mountain Daylight Time)
 */

/* tslint:disable */
/* eslint-disable */

import * as jspb from \\"google-protobuf\\";
export class MessageA extends jspb.Message {
  getInt(): number;
  setInt(value: number): MessageA;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MessageA.AsObject;
  static toObject(includeInstance: boolean, msg: MessageA): MessageA.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: MessageA,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): MessageA;
  static deserializeBinaryFromReader(
    message: MessageA,
    reader: jspb.BinaryReader
  ): MessageA;
}

export namespace MessageA {
  export type AsObject = {
    pb_int: number;
  };
}

export class MessageB extends jspb.Message {
  getInt(): number;
  setInt(value: number): MessageB;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MessageB.AsObject;
  static toObject(includeInstance: boolean, msg: MessageB): MessageB.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: MessageB,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): MessageB;
  static deserializeBinaryFromReader(
    message: MessageB,
    reader: jspb.BinaryReader
  ): MessageB;
}

export namespace MessageB {
  export type AsObject = {
    pb_int: number;
  };
}
"
`;

exports[`gRCP service definitions generate grpc service definition without promise clients 5`] = `
"/**
 *       ***************************************
 *          AUTOGENERATED FILE - DO NOT EDIT
 *       ***************************************
 *
 * This file was generated by grpc-tools-node-protoc-promise-ts
 * https://github.com/rhinodavid/grpc-tools-node-protoc-promise-ts
 *
 * package: test
 * file: test.proto
 * generated at: Mon Sep 21 2020 03:15:20 GMT-0600 (Mountain Daylight Time)
 */

/* tslint:disable */
/* eslint-disable */

import * as grpc from \\"grpc\\";
import * as test_pb from \\"./test_pb\\";

interface ITestService
  extends grpc.ServiceDefinition<grpc.UntypedServiceImplementation> {
  unary: ITestService_Iunary;
  unary: ITestService_Iunary;
  unary: ITestService_Iunary;
}

interface ITestService_Iunary
  extends grpc.MethodDefinition<test_pb.MessageA, test_pb.MessageB> {
  path: string; // \\"/test.Test/unary\\"
  requestStream: boolean; // false
  responseStream: boolean; // false
  requestSerialize: grpc.serialize<test_pb.MessageA>;
  requestDeserialize: grpc.deserialize<test_pb.MessageA>;
  responseSerialize: grpc.serialize<test_pb.MessageB>;
  responseDeserialize: grpc.deserialize<test_pb.MessageB>;
}
interface ITestService_Iunary
  extends grpc.MethodDefinition<test_pb.MessageA, test_pb.MessageB> {
  path: string; // \\"/test.Test/unary\\"
  requestStream: boolean; // false
  responseStream: boolean; // false
  requestSerialize: grpc.serialize<test_pb.MessageA>;
  requestDeserialize: grpc.deserialize<test_pb.MessageA>;
  responseSerialize: grpc.serialize<test_pb.MessageB>;
  responseDeserialize: grpc.deserialize<test_pb.MessageB>;
}
interface ITestService_Iunary
  extends grpc.MethodDefinition<test_pb.MessageA, test_pb.MessageB> {
  path: string; // \\"/test.Test/unary\\"
  requestStream: boolean; // false
  responseStream: boolean; // false
  requestSerialize: grpc.serialize<test_pb.MessageA>;
  requestDeserialize: grpc.deserialize<test_pb.MessageA>;
  responseSerialize: grpc.serialize<test_pb.MessageB>;
  responseDeserialize: grpc.deserialize<test_pb.MessageB>;
}

export const TestService: ITestService;

export interface ITestServer {
  unary: grpc.handleUnaryCall<test_pb.MessageA, test_pb.MessageB>;
  unary: grpc.handleUnaryCall<test_pb.MessageA, test_pb.MessageB>;
  unary: grpc.handleUnaryCall<test_pb.MessageA, test_pb.MessageB>;
}

export interface ITestClient {
  unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
}

export class TestClient extends grpc.Client implements ITestClient {
  constructor(
    address: string,
    credentials: grpc.ChannelCredentials,
    options?: object
  );
  public unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
}
"
`;

exports[`gRCP service definitions generate grpc service definition without promise clients 6`] = `
"/**
 *       ***************************************
 *          AUTOGENERATED FILE - DO NOT EDIT
 *       ***************************************
 *
 * This file was generated by grpc-tools-node-protoc-promise-ts
 * https://github.com/rhinodavid/grpc-tools-node-protoc-promise-ts
 *
 * package: test
 * file: test.proto
 * generated at: Mon Sep 21 2020 03:15:20 GMT-0600 (Mountain Daylight Time)
 */

/* tslint:disable */
/* eslint-disable */

import * as grpc from \\"grpc\\";
import * as test_pb from \\"./test_pb\\";
import { TUnaryRpc } from \\"grpc-promise-ts\\";

interface ITestService
  extends grpc.ServiceDefinition<grpc.UntypedServiceImplementation> {
  unary: ITestService_Iunary;
  unary: ITestService_Iunary;
  unary: ITestService_Iunary;
  unary: ITestService_Iunary;
}

interface ITestService_Iunary
  extends grpc.MethodDefinition<test_pb.MessageA, test_pb.MessageB> {
  path: string; // \\"/test.Test/unary\\"
  requestStream: boolean; // false
  responseStream: boolean; // false
  requestSerialize: grpc.serialize<test_pb.MessageA>;
  requestDeserialize: grpc.deserialize<test_pb.MessageA>;
  responseSerialize: grpc.serialize<test_pb.MessageB>;
  responseDeserialize: grpc.deserialize<test_pb.MessageB>;
}
interface ITestService_Iunary
  extends grpc.MethodDefinition<test_pb.MessageA, test_pb.MessageB> {
  path: string; // \\"/test.Test/unary\\"
  requestStream: boolean; // false
  responseStream: boolean; // false
  requestSerialize: grpc.serialize<test_pb.MessageA>;
  requestDeserialize: grpc.deserialize<test_pb.MessageA>;
  responseSerialize: grpc.serialize<test_pb.MessageB>;
  responseDeserialize: grpc.deserialize<test_pb.MessageB>;
}
interface ITestService_Iunary
  extends grpc.MethodDefinition<test_pb.MessageA, test_pb.MessageB> {
  path: string; // \\"/test.Test/unary\\"
  requestStream: boolean; // false
  responseStream: boolean; // false
  requestSerialize: grpc.serialize<test_pb.MessageA>;
  requestDeserialize: grpc.deserialize<test_pb.MessageA>;
  responseSerialize: grpc.serialize<test_pb.MessageB>;
  responseDeserialize: grpc.deserialize<test_pb.MessageB>;
}
interface ITestService_Iunary
  extends grpc.MethodDefinition<test_pb.MessageA, test_pb.MessageB> {
  path: string; // \\"/test.Test/unary\\"
  requestStream: boolean; // false
  responseStream: boolean; // false
  requestSerialize: grpc.serialize<test_pb.MessageA>;
  requestDeserialize: grpc.deserialize<test_pb.MessageA>;
  responseSerialize: grpc.serialize<test_pb.MessageB>;
  responseDeserialize: grpc.deserialize<test_pb.MessageB>;
}

export const TestService: ITestService;

export interface ITestServer {
  unary: grpc.handleUnaryCall<test_pb.MessageA, test_pb.MessageB>;
  unary: grpc.handleUnaryCall<test_pb.MessageA, test_pb.MessageB>;
  unary: grpc.handleUnaryCall<test_pb.MessageA, test_pb.MessageB>;
  unary: grpc.handleUnaryCall<test_pb.MessageA, test_pb.MessageB>;
}

export interface ITestClient {
  unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
}

export class TestClient extends grpc.Client implements ITestClient {
  constructor(
    address: string,
    credentials: grpc.ChannelCredentials,
    options?: object
  );
  public unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
  public unary(
    request: test_pb.MessageA,
    metadata: grpc.Metadata,
    options: Partial<grpc.CallOptions>,
    callback: (
      error: grpc.ServiceError | null,
      response: test_pb.MessageB
    ) => void
  ): grpc.ClientUnaryCall;
}

/**
 * Interface and class to declare a Test client that has been promisifyed with the
 * \`grpc-promise-ts\` (https://github.com/rhinodavid/grpc-promise-ts) package
 */
export interface ITestPromiseClient {
  unary: TUnaryRpc<test_pb.MessageA, test_pb.MessageB>;
  unary: TUnaryRpc<test_pb.MessageA, test_pb.MessageB>;
  unary: TUnaryRpc<test_pb.MessageA, test_pb.MessageB>;
  unary: TUnaryRpc<test_pb.MessageA, test_pb.MessageB>;
}

export class TestPromiseClient extends grpc.Client
  implements ITestPromiseClient {
  // This class cannot be directly instantiated.
  // To get an instance of TestPromiseClient, first create
  // a TestClient and then pass it to the \`convertToPromiseClient\`
  // function in the \`gprc-promise-ts\` package
  public unary: TUnaryRpc<test_pb.MessageA, test_pb.MessageB>;
  public unary: TUnaryRpc<test_pb.MessageA, test_pb.MessageB>;
  public unary: TUnaryRpc<test_pb.MessageA, test_pb.MessageB>;
  public unary: TUnaryRpc<test_pb.MessageA, test_pb.MessageB>;

  // TODO: add other types of RPCs
}
"
`;
